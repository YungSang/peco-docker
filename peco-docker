#!/bin/sh

name=$(basename $0)

## Functions

  _exit_with() {
    local message="$1"

    echo "$message"
    exit 0
  }

  _is_executable() {
    local command="$1"
    type "$command" > /dev/null 2>&1
  }

  _peco_docker_search() {
    local term="$1"

    if [ -z "$term" ] ; then
      _exit_with "Usage: $name search <term>"
    fi

    docker search $term | awk 'NR > 1' | peco 2> /dev/null
  }

  _peco_docker_pull() {
    local term="$1"
    local tag="$2"

    if [ -z "$term" ] ; then
      _exit_with "Usage: $name pull <term to search> [tag]"
    fi

    if [ -z "$tag" ] ; then
      tag="latest"
    fi

    local images=$(_peco_docker_search $term | awk '{print $1}')

    for image in $images ; do
      echo docker pull "${image}:${tag}"
      docker pull "${image}:${tag}"
    done
  }

  _peco_docker_images() {
    local arg=$*

    docker images $arg | awk 'NR > 1' | peco 2> /dev/null
  }

  _peco_docker_tag() {
    local tag="$1"

    if [ -z "$tag" ] ; then
      _exit_with "Usage: $name tag <name>[:tag]"
    fi

    local image=$(_peco_docker_images -a | awk 'NR == 1 {print $3}')

    echo docker tag "$image" "$tag"
    docker tag "$image" "$tag"
  }

  _peco_docker_push() {
    local images=$(_peco_docker_images | awk '{print $1, $2}' | tr " " ":")

    for image in $images ; do
      echo docker push "$image"
      docker push "$image"
    done
  }

  _peco_docker_save() {
    image=$(_peco_docker_images -a | awk 'NR == 1 {print $3}')

    echo docker save "$image"
    docker save "$image"
  }

  _peco_docker_rmi() {
    local arg="$1"

    local images=$(_peco_docker_images -a | awk '{print $3}')

    for image in $images ; do
      echo docker rmi $arg "$image"
      docker rmi $arg "$image"
    done
  }

  _peco_docker_inspecti() {
    local arg=$*

    local images=$(_peco_docker_images -a | awk 'BEGIN{ORS=" "}{print $3}')

    echo docker inspect $args $images >&2
    docker inspect $args $images
  }

  _peco_docker_history() {
    local arg=$*

    local images=$(_peco_docker_images -a | awk '{print $3}')

    for image in $images ; do
      echo docker history $arg "$image"
      docker history $arg "$image"
    done
  }

  _peco_docker_ps() {
    local arg=$*

    docker ps $arg | awk 'NR > 1' | peco 2> /dev/null
  }

  _peco_docker_ps_stopped() {
    local runnings=$(docker ps | awk 'NR > 1' | awk '{print $1}' | tr "\\n" "|")
    runnings=${runnings%%?}

    docker ps -a | awk 'NR > 1 && $1 !~ /^('"$runnings"')$/' | peco 2> /dev/null
  }

  _peco_docker_attach() {
    local arg=$*

    container=$(_peco_docker_ps | awk 'NR == 1 {print $1}')

    echo docker attach $args "$container"
    docker attach $args "$container"
  }

  _peco_docker_commit() {
    local tag="$1"

    container=$(_peco_docker_ps -a | awk 'NR == 1 {print $1}')

    echo docker commit "$container" $tag
    docker commit "$container" $tag
  }

  _peco_docker_diff() {
    container=$(_peco_docker_ps -a | awk 'NR == 1 {print $1}')

    echo docker diff "$container"
    docker diff "$container"
  }

  _peco_docker_export() {
    container=$(_peco_docker_ps -a | awk 'NR == 1 {print $1}')

    echo docker export "$container"
    docker export "$container"
  }

  _peco_docker_start() {
    local containers=$(_peco_docker_ps_stopped | awk 'BEGIN{ORS=" "}{print $1}')

    echo docker start $containers
    docker start $containers
  }

  _peco_docker_restart() {
    local containers=$(_peco_docker_ps | awk 'BEGIN{ORS=" "}{print $1}')

    echo docker restart $containers
    docker restart $containers
  }

  _peco_docker_stop() {
    local containers=$(_peco_docker_ps | awk 'BEGIN{ORS=" "}{print $1}')

    echo docker stop $containers
    docker stop $containers
  }

  _peco_docker_kill() {
    local containers=$(_peco_docker_ps | awk 'BEGIN{ORS=" "}{print $1}')

    echo docker kill $containers
    docker kill $containers
  }

  _peco_docker_rm() {
    local arg="$1"
    local containers=""

    if [ "$arg" = "-f" ] ; then
      containers=$(_peco_docker_ps -a | awk '{print $1}')
    else
      containers=$(_peco_docker_ps_stopped | awk '{print $1}')
    fi

    for container in $containers ; do
      echo docker rm $arg "$container"
      docker rm $arg "$container"
    done
  }

  _peco_docker_inspect() {
    local arg=$*

    local containers=$(_peco_docker_ps -a | awk 'BEGIN{ORS=" "}{print $1}')

    echo docker inspect $args $containers >&2
    docker inspect $args $containers
  }

  _peco_docker_top() {
    containers=$(_peco_docker_ps | awk '{print $1}')

    for container in $containers ; do
      echo docker top "$container"
      docker top "$container"
    done
  }

  _peco_docker_logs() {
    local arg=$*

    container=$(_peco_docker_ps -a | awk 'NR == 1 {print $1}')

    echo docker logs $args "$container"
    docker logs $args "$container"
  }

  _peco_docker_help() {
      cat <<EOF
Usage: $name <command> [OPTIONS]

command:
  search          Search Docker images in the Docker registry
  pull            Search Docker images and download the selected images

  images [-a]     List the selected images in your Docker host ($DOCKER_HOST)
  tag             Tag the first selected image
  push            Push the selected images to the Docker registry
  save > <tar>    Export the first selected image
  rmi [-f]        Remove the selected images
  inspecti [-f]   Show low-level information on the selected images
  historyï»¿         Show the history of the selected images

  ps [-a]         List the selected containers in your Docker host ($DOCKER_HOST)
  attach          Attach to the first selected running container
  commit [tag]    Create a new image from the first selected running container
  diff            Inspect changes on the first selected container's filesystem
  export > <tar>  Export the contents of the first selected container's filesystem
  start           Start the selected stopped containers
  restart         Restart the selected running containers
  stop            Stop the selected running containers
  kill            Kill the selected running containers
  rm [-f]         Remove the selected containers
  inspect [-f]    Show low-level information on the selected containers
  top             Lookup the processes of the selected running containers
  logs            Fetch the logs of the first selected container

  help            Show this message
EOF
  }

  peco_docker() {
    local sub="$1"; shift

    if _is_executable "_peco_docker_$sub" ; then
      _peco_docker_$sub $*
    else
      echo "$name: no such command \"$sub\""
      exit 1
    fi
  }

## Check required command

  _is_executable peco || {
    cat <<EOF
"peco" couldn't be found. Please install or set \$PATH.

See: https://github.com/peco/peco#installation
EOF
    exit 1
  }

  _is_executable docker || {
    cat <<EOF
"docker" couldn't be found. Please install or set \$PATH.

See: https://docs.docker.com/installation/#installation
EOF
    exit 1
  }

  if [ -z "$DOCKER_HOST" ] ; then
    cat <<EOF
"DOCKER_HOST" is not set. Please set it for your Docker host.

e.g. DOCKER_HOST=tcp://localhost:2375
EOF
    exit 1
  fi

## Main routine

  if [ $# -ge 1 ] ; then
    peco_docker $*
  else
    peco_docker help
  fi
